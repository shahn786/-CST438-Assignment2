package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.EnrollmentDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class StudentController {

    @Autowired
    EnrollmentRepository enrollmentRepository;

    @Autowired
    SectionRepository sectionRepository;

    @Autowired
    TermRepository termRepository;

    @Autowired
    UserRepository userRepository;

   // student gets transcript showing list of all enrollments
   // studentId will be temporary until Login security is implemented
   //example URL  /transcript?studentId=19803
   @GetMapping("/transcripts")
   public List<EnrollmentDTO> getTranscript(@RequestParam("studentId") int studentId) {

        return null;
   }

    // student gets a list of their enrollments for the given year, semester
    // user must be student
    // studentId will be temporary until Login security is implemented
   @GetMapping("/enrollments")
   public List<EnrollmentDTO> getSchedule(
           @RequestParam("year") int year,
           @RequestParam("semester") String semester,
           @RequestParam("studentId") int studentId) {


       Term term = termRepository.findByYearAndSemester(year, semester);
       if (term == null) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "year, semester invalid");
       }

       User student = userRepository.findById(studentId).orElse(null);
       if (student == null || !student.getType().equals("STUDENT")) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "student not found or not a student");
       }

       List<Enrollment> enrollments = enrollmentRepository.findByYearAndSemesterOrderByCourseId(term.getTermId(), semester, studentId);

       List<EnrollmentDTO> schedule = new ArrayList<>();
       for (Enrollment e : enrollments) {
           schedule.add(new EnrollmentDTO(
                   e.getEnrollmentId(),
                   e.getGrade(),
                   e.getStudent().getId(),
                   e.getStudent().getName(),
                   e.getStudent().getEmail(),
                   e.getSection().getCourse().getCourseId(),
                   e.getSection().getCourse().getTitle(),
                   e.getSection().getSecId(),
                   e.getSection().getSectionNo(),
                   e.getSection().getBuilding(),
                   e.getSection().getRoom(),
                   e.getSection().getTimes(),
                   e.getSection().getCourse().getCredits(),
                   e.getSection().getTerm().getYear(),
                   e.getSection().getTerm().getSemester()
           ));
       }
       return schedule;
   }



    // student adds enrollment into a section
    // user must be student
    // return EnrollmentDTO with enrollmentId generated by database
    @PostMapping("/enrollments/sections/{sectionNo}")
    public EnrollmentDTO addCourse(
		    @PathVariable int sectionNo,
            @RequestParam("studentId") int studentId ) {

        Section section = sectionRepository.findById(sectionNo).orElse(null);
        if (section == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "section not found");
        }

        Date today = new Date();
        if (today.before(section.getTerm().getAddDate()) || today.after(section.getTerm().getAddDeadline())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "current date is outside of the add period");
        }

        User student = userRepository.findById(studentId).orElse(null);
        if (student == null || !student.getType().equals("STUDENT")) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "student not found or not a student");
        }

        Enrollment existingEnrollment = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(sectionNo, studentId);
        if (existingEnrollment != null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "student already enrolled in this section");
        }

        Enrollment e = new Enrollment();
        e.setSection(section);
        e.setStudent(student);
        e.setGrade(null);
        enrollmentRepository.save(e);

        return new EnrollmentDTO(
                e.getEnrollmentId(),
                e.getGrade(),
                e.getStudent().getId(),
                e.getStudent().getName(),
                e.getStudent().getEmail(),
                e.getSection().getCourse().getCourseId(),
                e.getSection().getCourse().getTitle(),
                e.getSection().getSecId(),
                e.getSection().getSectionNo(),
                e.getSection().getBuilding(),
                e.getSection().getRoom(),
                e.getSection().getTimes(),
                e.getSection().getCourse().getCredits(),
                e.getSection().getTerm().getYear(),
                e.getSection().getTerm().getSemester()
        );
    }

    // student drops a course
    // user must be student
   @DeleteMapping("/enrollments/{enrollmentId}")
   public void dropCourse(@PathVariable("enrollmentId") int enrollmentId) {

       Enrollment e = enrollmentRepository.findById(enrollmentId).orElse(null);
       if (e == null) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "enrollment not found");
       }

       User student = userRepository.findById(e.getStudent().getId()).orElse(null);
       if (student == null || !student.getType().equals("STUDENT")) {
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "student not found or not a student");
       }

       Date today = new Date();
       if (today.after(e.getSection().getTerm().getDropDeadline())) {
           throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "current date is after the drop deadline");
       }

       enrollmentRepository.delete(e);
   }
}